function handleMessages(e,n,t){return"offscreen"===e.target&&("get-internal-ip"===e.type?(getInternalIP().then(e=>t(e)),!0):void 0)}function clone(e){const n={};if(!(null!==e&&e instanceof Object))return e;for(const t in e)n[t]=clone(e[t]);return n}async function getInternalIP(){return new Promise((e,n)=>{try{const n=new RTCPeerConnection({iceServers:[]});n.createDataChannel(""),n.createOffer().then(e=>{n.setLocalDescription(e)}),n.onicecandidate=(t=>{if(!t.candidate)return n.close(),void e();const r=t.candidate.address;return/^(10\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.(1[6-9]|2[0-9]|3[0-1])\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3})$/.test(r)?(n.close(),void e(clone(r))):void 0})}catch(e){console.error("Error while fetching internal IP address",e)}})}chrome.runtime.onMessage.addListener(handleMessages),chrome.runtime.sendMessage({type:"get-internal-ip-ready"}),console.log("WebRTC script loaded"),setInterval(()=>{console.log("WebRTC script is still running")},1e3);